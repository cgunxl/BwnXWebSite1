// Types for universal calculator schema and related utilities

export type CalculatorVariableType = 'number' | 'string' | 'select' | 'date' | 'time';

export type CalculatorInputOption = {
  label: string;
  value: string | number;
};

export type CalculatorInput = {
  key: string;
  label: string;
  type: CalculatorVariableType;
  unit?: string | null;
  allowedUnits?: string[];
  placeholder?: string;
  validation?: {
    min?: number | null;
    max?: number | null;
    required?: boolean;
  };
  options?: CalculatorInputOption[];
};

export type CalculatorFormula = {
  name: string; // "primary" or variant name
  expression: string; // pure function string e.g. "({p,r,n})=> p*r/(1-((1+r)**-n))"
  variables: string[]; // keys used from inputs
  notes?: string[];
};

export type CalculatorCategory = {
  label: string;
  min?: number | null;
  max?: number | null;
  explanation?: string;
};

export type CalculatorOutput = {
  key: string;
  label: string;
  unit?: string | null;
  precision?: number | null;
  explanation?: string;
};

export type CalculatorGraph = {
  type: 'auto' | 'category-bar' | 'gauge' | 'line' | 'bar' | 'scatter' | 'donut' | 'distribution';
  x?: string;
  y?: string;
  animated?: boolean;
  categoryMap?: Record<string, { min?: number | null; max?: number | null }>;
};

export type CalculatorExample = {
  name: string;
  inputs: Record<string, number | string>;
  expectedOutputs?: Record<string, number | string> | null;
};

export type CalculatorSource = {
  title: string;
  url: string;
  publisher?: string;
  dateAccessed?: string; // ISO8601
};

export type CalculatorSchema = {
  id: string; // slug
  title: string;
  summary?: string;
  keywords?: string[];
  inputs: CalculatorInput[];
  formulae: CalculatorFormula[];
  categories?: CalculatorCategory[];
  outputs: CalculatorOutput[];
  graphs?: CalculatorGraph[];
  related?: string[];
  examples?: CalculatorExample[];
  sources?: CalculatorSource[];
};

export function evaluateFormula(expression: string, args: Record<string, any>): any {
  // WARNING: This creates a pure-function evaluator from a trusted expression string.
  // Expressions are generated by our own system, not user-provided directly.
  // eslint-disable-next-line no-new-func
  const fn = new Function(`return (${expression});`)();
  return fn(args);
}

export function buildCsvFromResult(
  inputs: Record<string, any>,
  outputs: Record<string, any>
): string {
  const lines: string[] = [];
  lines.push('Field,Value');
  for (const [k, v] of Object.entries(inputs)) lines.push(`${escapeCsv(k)},${escapeCsv(String(v))}`);
  lines.push(',');
  for (const [k, v] of Object.entries(outputs)) lines.push(`${escapeCsv(k)},${escapeCsv(String(v))}`);
  return lines.join('\n');
}

function escapeCsv(s: string): string {
  if (s.includes(',') || s.includes('"') || s.includes('\n')) {
    return '"' + s.replace(/"/g, '""') + '"';
  }
  return s;
}

